name: CI

on:
  # Compare the preceeding commit -> to the current commit of the main branch.
  # (Note: To compare changes between the current commit to the last pushed remote commit of the main branch set `since_last_remote_commit: true`)
  push:
    branches:
      - main
  # Compare the last commit of main -> to the current commit of a PR branch.
  # (Note: To compare changes between the current commit to the last pushed remote commit of a PR branch set `since_last_remote_commit: true`)
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.


      - name: Create Standard Directory
        shell: bash
        run: mkdir demo

      - name: Install Coding Standard
        shell: bash
        working-directory: demo
        run: composer require "magento/magento-coding-standard"

      - name: Register Coding Standard
        shell: bash
        working-directory: demo
        run: vendor/bin/phpcs --config-set installed_paths ${{ github.workspace }}/demo/vendor/magento/magento-coding-standard,${{ github.workspace }}/demo/vendor/phpcompatibility/php-compatibility

      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow1" >> $GITHUB_ENV
      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.action_state }}" # This will output 'yellow'
      

      - uses: actions/checkout@v2
        id: changed-files-before
        name: Checkout ${{ github.event_name != 'pull_request' && 'main' || github.event.push.head.ref }}
        with:
          ref: ${{ github.event_name != 'pull_request' && 'main' || github.event.push.head.ref }}
          fetch-depth: 2



      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Get changed files
        shell: bash
        id: changed-new-files
        run: |
          if ${{ github.event_name == 'pull_request' }}; then
              echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
          else
              echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Code
        uses: actions/checkout@v2

      - uses: actions/checkout@v2
        id: new-changes
        name: Checkout ${{ github.event_name != 'push' && 'main' || github.event.push.head.ref }}
        with:
          ref: ${{ github.event_name != 'push' && 'main' || github.event.push.head.ref }}
          fetch-depth: 0

      - name: Prev Commit id
        shell: bash
        id: prev-cmt-id
        run: echo "prev-cmt=$(git log -1 --format='%H')" >> $GITHUB_OUTPUT

      - name: List changed files
        shell: bash
        run: |
            for file in ${{ steps.changed-new-files.outputs.changed_files }}; do
                git checkout HEAD~1 $file
                cp $file $GITHUB_WORKSPACE/file.txt
                cat $GITHUB_WORKSPACE/file.txt
            done


      - name: Get Changed Files
        shell: bash
        id: changed-list-files
        run: |
          git diff --name-only --diff-filter=ACMRT HEAD^ HEAD
          echo "files=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.push.base.sha }} ${{ github.sha }} | xargs)" >> $GITHUB_OUTPUT
        if: github.event_name == 'push'

      - name: List of Files
        shell: bash
        id: list-files
        run: echo "${{ steps.changed-list-files.outputs.files}}"
      - name: Get Changed
        shell: bash
        working-directory: demo
        id: changed
        run: |
          echo '$(git diff --unified=0 --diff-filter=ACDMR HEAD^ HEAD | grep -v "^@@" | grep "^[+]" | grep -Ev "^(--- a/|\+\+\+ b/)")' > hw1.txt
          cat hw1.txt

      - name: Get Changed
        shell: bash
        working-directory: demo
        id: file-write
        run: |
          echo "TEst 1" > hw1.txt
          cat hw1.txt
  

